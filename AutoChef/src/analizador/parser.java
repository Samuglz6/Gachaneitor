
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import aplicacion.dominio.*;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\011" +
    "\002\000\002\023\002\000\002\024\002\000\002\025\002" +
    "\000\002\026\002\000\002\027\002\000\002\030\002\000" +
    "\002\003\003\000\002\003\004\000\002\004\017\000\002" +
    "\005\005\000\002\006\006\000\002\007\003\000\002\007" +
    "\004\000\002\012\006\000\002\017\006\000\002\017\002" +
    "\000\002\020\003\000\002\020\004\000\002\031\010\000" +
    "\002\010\005\000\002\010\006\000\002\013\014\000\002" +
    "\014\005\000\002\015\005\000\002\016\016\000\002\016" +
    "\006\000\002\016\012\000\002\021\007\000\002\021\002" +
    "\000\002\022\003\000\002\022\005\000\002\032\010\000" +
    "\002\033\011\000\002\034\007\000\002\034\010\000\002" +
    "\035\010\000\002\035\006\000\002\035\010\000\002\036" +
    "\004\000\002\036\002\000\002\037\007\000\002\040\003" +
    "\000\002\040\004\000\002\041\017\000\002\042\007\000" +
    "\002\043\003\000\002\043\005\000\002\044\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\022\006\001\002\000\006\002\ufff8\022" +
    "\006\001\002\000\004\002\234\001\002\000\004\004\010" +
    "\001\002\000\004\002\001\001\002\000\004\021\011\001" +
    "\002\000\004\005\012\001\002\000\004\013\013\001\002" +
    "\000\004\023\014\001\002\000\004\004\232\001\002\000" +
    "\004\024\017\001\002\000\006\025\032\026\uffef\001\002" +
    "\000\004\013\020\001\002\000\004\004\022\001\002\000" +
    "\006\004\022\014\ufff3\001\002\000\004\021\025\001\002" +
    "\000\004\014\024\001\002\000\006\025\ufff4\026\ufff4\001" +
    "\002\000\004\005\026\001\002\000\004\020\027\001\002" +
    "\000\006\004\ufff1\014\ufff1\001\002\000\004\014\ufff2\001" +
    "\002\000\004\026\ufff9\001\002\000\004\013\033\001\002" +
    "\000\004\004\036\001\002\000\004\014\045\001\002\000" +
    "\006\004\036\014\uffee\001\002\000\004\021\037\001\002" +
    "\000\004\012\040\001\002\000\004\006\041\001\002\000" +
    "\004\005\042\001\002\000\004\020\043\001\002\000\006" +
    "\004\uffec\014\uffec\001\002\000\004\014\uffed\001\002\000" +
    "\004\026\ufff0\001\002\000\004\026\uffff\001\002\000\004" +
    "\026\ufffc\001\002\000\004\026\053\001\002\000\004\014" +
    "\231\001\002\000\006\014\uffff\026\uffff\001\002\000\004" +
    "\004\054\001\002\000\004\013\055\001\002\000\004\027" +
    "\056\001\002\000\004\007\224\001\002\000\004\030\061" +
    "\001\002\000\006\031\064\033\065\001\002\000\004\012" +
    "\062\001\002\000\004\020\063\001\002\000\006\031\uffe7" +
    "\033\uffe7\001\002\000\004\012\211\001\002\000\004\012" +
    "\206\001\002\000\006\025\070\034\uffe2\001\002\000\004" +
    "\034\ufff9\001\002\000\004\013\071\001\002\000\004\004" +
    "\ufffe\001\002\000\004\004\074\001\002\000\004\014\105" +
    "\001\002\000\004\021\100\001\002\000\006\004\ufffc\014" +
    "\uffe1\001\002\000\004\004\074\001\002\000\004\014\uffe0" +
    "\001\002\000\004\012\101\001\002\000\004\006\102\001" +
    "\002\000\004\005\103\001\002\000\004\020\104\001\002" +
    "\000\006\004\uffdf\014\uffdf\001\002\000\004\034\uffe3\001" +
    "\002\000\004\034\110\001\002\000\004\014\205\001\002" +
    "\000\004\013\111\001\002\000\006\035\uffd7\040\112\001" +
    "\002\000\004\015\201\001\002\000\014\014\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\112\001\002\000\004\035\ufffd\001" +
    "\002\000\004\035\ufffa\001\002\000\004\035\121\001\002" +
    "\000\004\014\177\001\002\000\004\037\163\001\002\000" +
    "\004\015\153\001\002\000\010\035\ufffb\036\uffd7\040\112" +
    "\001\002\000\004\035\ufffb\001\002\000\004\036\126\001" +
    "\002\000\010\035\ufffa\037\ufffa\040\ufffa\001\002\000\004" +
    "\015\131\001\002\000\012\035\uffd5\036\126\037\uffd5\040" +
    "\uffd5\001\002\000\010\035\uffd4\037\uffd4\040\uffd4\001\002" +
    "\000\004\005\132\001\002\000\004\017\133\001\002\000" +
    "\004\012\134\001\002\000\004\017\135\001\002\000\004" +
    "\012\136\001\002\000\004\017\137\001\002\000\004\012" +
    "\140\001\002\000\004\017\141\001\002\000\004\011\142" +
    "\001\002\000\004\016\143\001\002\000\004\020\144\001" +
    "\002\000\012\035\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002" +
    "\000\010\035\ufffa\037\ufffa\040\ufffa\001\002\000\010\035" +
    "\121\037\uffd7\040\112\001\002\000\004\037\uffdb\001\002" +
    "\000\004\037\uffd9\001\002\000\004\035\121\001\002\000" +
    "\004\037\uffda\001\002\000\006\004\156\012\154\001\002" +
    "\000\004\006\161\001\002\000\004\016\157\001\002\000" +
    "\004\016\uffd1\001\002\000\004\020\160\001\002\000\010" +
    "\035\uffd2\036\uffd2\040\uffd2\001\002\000\004\004\162\001" +
    "\002\000\004\016\uffd0\001\002\000\004\015\171\001\002" +
    "\000\010\014\uffd7\035\uffd7\040\112\001\002\000\006\014" +
    "\ufffa\035\ufffa\001\002\000\006\014\ufffa\035\ufffa\001\002" +
    "\000\006\014\uffdd\035\121\001\002\000\004\014\uffdc\001" +
    "\002\000\004\005\172\001\002\000\004\017\173\001\002" +
    "\000\004\004\174\001\002\000\004\016\175\001\002\000" +
    "\004\020\176\001\002\000\010\014\uffcf\035\uffcf\040\uffcf" +
    "\001\002\000\004\014\uffde\001\002\000\012\014\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\001\002\000\004\005\202\001\002" +
    "\000\004\016\203\001\002\000\004\020\204\001\002\000" +
    "\014\014\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002" +
    "\000\006\014\uffe9\026\uffe9\001\002\000\004\010\207\001" +
    "\002\000\004\020\210\001\002\000\006\025\uffe5\034\uffe5" +
    "\001\002\000\004\010\212\001\002\000\004\020\213\001" +
    "\002\000\004\032\214\001\002\000\004\012\215\001\002" +
    "\000\004\010\216\001\002\000\004\020\217\001\002\000" +
    "\010\025\uffe4\033\220\034\uffe4\001\002\000\004\012\221" +
    "\001\002\000\004\010\222\001\002\000\004\020\223\001" +
    "\002\000\006\025\uffe6\034\uffe6\001\002\000\004\020\225" +
    "\001\002\000\004\030\uffe8\001\002\000\006\014\ufffb\026" +
    "\ufffb\001\002\000\006\014\uffeb\026\053\001\002\000\004" +
    "\014\uffea\001\002\000\006\002\ufff6\022\ufff6\001\002\000" +
    "\004\020\233\001\002\000\004\024\ufff5\001\002\000\004" +
    "\002\000\001\002\000\004\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\002\004\003\006\004\003\001\001\000" +
    "\006\003\234\004\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\004\006\015\001\001\000\004\017\030\001" +
    "\001\000\002\001\001\000\006\007\022\012\020\001\001" +
    "\000\006\007\027\012\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\045\001\001\000\002\001\001\000\006\020\033\031\034" +
    "\001\001\000\002\001\001\000\006\020\043\031\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\046\001\001" +
    "\000\004\025\047\001\001\000\006\010\050\013\051\001" +
    "\001\000\002\001\001\000\004\011\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\056\001\001\000" +
    "\002\001\001\000\004\015\057\001\001\000\004\016\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\066" +
    "\001\001\000\004\030\105\001\001\000\002\001\001\000" +
    "\004\023\071\001\001\000\006\022\072\032\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\075\001" +
    "\001\000\006\022\076\032\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\113\037\112\001\001\000\002\001\001\000\006" +
    "\036\177\037\112\001\001\000\004\024\114\001\001\000" +
    "\004\027\115\001\001\000\010\034\116\035\117\042\121" +
    "\001\001\000\002\001\001\000\004\044\163\001\001\000" +
    "\002\001\001\000\010\026\122\036\123\037\112\001\001" +
    "\000\004\026\150\001\001\000\006\040\124\041\126\001" +
    "\001\000\004\027\144\001\001\000\002\001\001\000\006" +
    "\040\127\041\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\145\001\001\000" +
    "\012\035\146\036\147\037\112\042\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\151\042\121\001" +
    "\001\000\002\001\001\000\004\043\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\164\037\112\001\001\000" +
    "\004\027\165\001\001\000\004\027\166\001\001\000\010" +
    "\034\167\035\117\042\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\226\001\001\000\006\010\227\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ArrayList<Menu> menus = new ArrayList<Menu>();

	ArrayList<Menu> getMenus() {
		return menus;
	}

	public void setMenus(ArrayList<Menu> menus) {
		this.menus = menus;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= PROGRAMA 
            {
              Object RESULT =null;
		int vmenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vmenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Menu> vmen = (ArrayList<Menu>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Collections.reverse(vmen);
	parser.setMenus(vmen);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NPLATOS ::= 
            {
              ArrayList<Plato> RESULT =null;
		
	RESULT=((ArrayList<Plato>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NPLATOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NINGREINIT8 ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NINGREINIT8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NINGREINIT11 ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	ArrayList<Ingrediente> vingredientes = ((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value);
	RESULT=vingredientes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NINGREINIT11",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NINGRE1 ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NINGRE1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NINGRE2 ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NINGRE2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NINGRE4 ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NINGRE4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AUXING ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=new ArrayList<Ingrediente>(((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)).value));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUXING",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= SECCIONMENU 
            {
              ArrayList<Menu> RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Menu men = (Menu)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Menu> vmenus = new ArrayList<Menu>();
	vmenus.add(men);
	RESULT=vmenus;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA ::= SECCIONMENU PROGRAMA 
            {
              ArrayList<Menu> RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Menu men = (Menu)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vmenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vmenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Menu> vmen = (ArrayList<Menu>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vmen.add(men);
	RESULT=vmen;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SECCIONMENU ::= menu id dospuntos cadena izqLlave AUTOR SECCIONPLATOS SECCIONINGREDIENTESGLOBALES AUXING NPLATOS NINGRE1 SECCIONRECETAS drchLlave 
            {
              Menu RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int autright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String aut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ving2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ving2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Ingrediente> ving2 = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Plato> np = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> vpla2 = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for(Plato p : np) {
		System.out.println("WARNING: el plato "+p.getID()+" esta sin construir");
	}
	if(ving2.size()>0) {
		System.out.println("WARNING: no introduces todos los ingredientes globales del menu "+id);
	}
	Collections.reverse(vpla2);
	Collections.reverse(ving);
	Menu menu = new Menu(id, nom.replaceAll("\"",""), aut, vpla2, ving);
	RESULT=menu;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONMENU",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUTOR ::= nickname id pcoma 
            {
              String RESULT =null;
		int autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int autright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String aut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SECCIONPLATOS ::= platos izqLlave LISTADOPLATOS drchLlave 
            {
              ArrayList<Plato> RESULT =null;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=vpla;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPLATOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTADOPLATOS ::= PLATO 
            {
              ArrayList<Plato> RESULT =null;
		int plaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plato pla = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Plato> vplatos = new ArrayList<Plato>();
	vplatos.add(pla);
	RESULT=vplatos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTADOPLATOS ::= PLATO LISTADOPLATOS 
            {
              ArrayList<Plato> RESULT =null;
		int plaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Plato pla = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpla.add(pla);
	RESULT=vpla;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PLATO ::= id dospuntos cadena pcoma 
            {
              Plato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Plato plato = new Plato(id, nom.replaceAll("\"",""));
	RESULT=plato;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLATO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SECCIONINGREDIENTESGLOBALES ::= ingredientes izqLlave LISTADOINGREDIENTESGLOBALES drchLlave 
            {
              ArrayList<Ingrediente> RESULT =null;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTESGLOBALES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SECCIONINGREDIENTESGLOBALES ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=new ArrayList<Ingrediente>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTESGLOBALES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTADOINGREDIENTESGLOBALES ::= INGREDIENTEGLOBAL 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Ingrediente> vingredientes = new ArrayList<Ingrediente>();
	vingredientes.add(ing);
	RESULT=vingredientes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTESGLOBALES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTADOINGREDIENTESGLOBALES ::= INGREDIENTEGLOBAL LISTADOINGREDIENTESGLOBALES 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ving.add(ing);
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTESGLOBALES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INGREDIENTEGLOBAL ::= id dospuntos numero medidaIngrediente cadena pcoma 
            {
              Ingrediente RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer can = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String nombre = nom.replaceAll("\"","");
	Ingrediente ingrediente = new Ingrediente(id, nombre, can, EnumMedida.valueOf(med));
	RESULT=ingrediente;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTEGLOBAL",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SECCIONRECETAS ::= RECETA NPLATOS NINGRE2 
            {
              ArrayList<Plato> RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Plato rec = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> np = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ArrayList<Plato> vrecetas = new ArrayList<Plato>();
	vrecetas.add(rec);
	RESULT=vrecetas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SECCIONRECETAS ::= RECETA NPLATOS NINGRE2 SECCIONRECETAS 
            {
              ArrayList<Plato> RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Plato rec = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vrecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vrecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Plato> vrec = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vrec.add(rec);
	RESULT=vrec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RECETA ::= plato id izqLlave TIPO COMENSALES TIEMPO SECCIONINGREDIENTES AUXING SECCIONPASOS drchLlave 
            {
              Plato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EnumTipo tip = (EnumTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer com = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tiempos tie = (Tiempos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ving2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ving2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Ingrediente> ving2 = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	boolean encontrado = false;
	Plato plato = new Plato(id,"");
	ArrayList<Plato> vplatos = ((ArrayList<Plato>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value);
	for(int i = 0; i < vplatos.size(); i++) {
		if(id.equals((vplatos.get(i)).getID())) {
			plato.setNombre((vplatos.get(i)).getNombre());
			plato.setTipo(tip);
			plato.setComensales(com);
			plato.setTiempos(tie);
			Collections.reverse(ving);
			plato.setIngredientes(ving);
			Collections.reverse(vpas);
			plato.setPasos(vpas);
			((ArrayList<Plato>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value).remove(i);
			encontrado = true;
		}
	}
	if(!encontrado) {
		System.out.println("ERROR: no esta declarado el plato con id: "+id);
		throw new Exception("ERROR: no esta declarado el plato con id: "+id);
	}
	RESULT=plato;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= tipo nombreTipo pcoma 
            {
              EnumTipo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=EnumTipo.valueOf(tip);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMENSALES ::= comensales numero pcoma 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=num;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENSALES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma tTotal numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int tcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer tcoc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int mcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String mcoc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tpre = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String mpre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ttotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ttot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mtotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mtotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mtot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(tcoc, EnumTiempo.valueOf(mcoc), tpre, EnumTiempo.valueOf(mpre), ttot, EnumTiempo.valueOf(mtot));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIEMPO ::= tTotal numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int ttotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ttot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mtotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mtotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mtot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(0, EnumTiempo.valueOf("MIN"), 0, EnumTiempo.valueOf("MIN"), ttot, EnumTiempo.valueOf(mtot));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int tcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tcoc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String mcoc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tpre = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mpre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(tcoc, EnumTiempo.valueOf(mcoc), tpre, EnumTiempo.valueOf(mpre), 0, EnumTiempo.valueOf("MIN"));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SECCIONINGREDIENTES ::= ingredientes izqLlave NINGREINIT8 LISTADOINGREDIENTES drchLlave 
            {
              ArrayList<Ingrediente> RESULT =null;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SECCIONINGREDIENTES ::= 
            {
              ArrayList<Ingrediente> RESULT =null;
		
	RESULT=new ArrayList<Ingrediente>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTADOINGREDIENTES ::= INGREDIENTE 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Ingrediente> vingredientes = new ArrayList<Ingrediente>();
	vingredientes.add(ing);
	RESULT=vingredientes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTADOINGREDIENTES ::= INGREDIENTE NINGRE1 LISTADOINGREDIENTES 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ving.add(ing);
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INGREDIENTE ::= id dospuntos numero medidaIngrediente cadena pcoma 
            {
              Ingrediente RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer can = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	for(Ingrediente i : ((ArrayList<Ingrediente>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value)) {
		if(id.equals(i.getID())) {
			System.out.println("ERROR: existe un ingrediente global con el mismo id: "+id);
            		throw new Exception("ERROR: existe un ingrediente global con el mismo id: "+id);
		}
	}
	Ingrediente ingrediente = new Ingrediente(id, nom.replaceAll("\"",""), can, EnumMedida.valueOf(med));
	RESULT=ingrediente;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SECCIONPASOS ::= pasos izqLlave PASOSTEXTUALES NINGREINIT11 NINGRE4 LISTAPASOS drchLlave 
            {
              ArrayList<Paso> RESULT =null;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	vpas.addAll(vpastex);
	RESULT=vpas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPASOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAPASOS ::= PASOS SACAR PASOSTEXTUALES NINGRE4 NINGRE4 
            {
              ArrayList<Paso> RESULT =null;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PasoSacar sac = (PasoSacar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	ArrayList<Paso> vpasos = new ArrayList<Paso>();
	vpasos.addAll(vpastex);
	vpasos.add(sac);
	vpasos.addAll(vpas);
	RESULT=vpasos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTAPASOS ::= PASOS SACAR PASOSTEXTUALES NINGRE4 NINGRE4 LISTAPASOS 
            {
              ArrayList<Paso> RESULT =null;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PasoSacar sac = (PasoSacar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpasfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpasfin = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpasfin.addAll(vpastex);
	vpasfin.add(sac);
	vpasfin.addAll(vpas);
	RESULT=vpasfin;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PASOS ::= INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS NINGRE4 NINGRE4 PASOS 
            {
              ArrayList<Paso> RESULT =null;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vpasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vpasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Paso> vpasmaq = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpas.addAll(vpasmaq);
	vpas.addAll(vpastex);
	vpas.add(intr);
	RESULT=vpas;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PASOS ::= INTRODUCIR NINGRE2 NINGRE2 PASOS 
            {
              ArrayList<Paso> RESULT =null;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpas.add(intr);
	RESULT=vpas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PASOS ::= INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS NINGRE4 NINGRE4 PASOSTEXTUALES 
            {
              ArrayList<Paso> RESULT =null;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vpasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vpasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Paso> vpasmaq = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpastex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpastex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpastex2 = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Paso> vpasos = new ArrayList<Paso>();

	vpasos.addAll(vpastex2);
	vpasos.addAll(vpasmaq);
	vpasos.addAll(vpastex);
	vpasos.add(intr);


	RESULT=vpasos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PASOSTEXTUALES ::= PASOTEXTUAL PASOSTEXTUALES 
            {
              ArrayList<Paso> RESULT =null;
		int pastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Paso pastex = (Paso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpastex.add(pastex);
	RESULT=vpastex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PASOSTEXTUALES ::= 
            {
              ArrayList<Paso> RESULT =null;
		
	RESULT=new ArrayList<Paso>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PASOTEXTUAL ::= realizar izqParent cadena drchParent pcoma 
            {
              Paso RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	Paso paso = new Paso(des.replaceAll("\"",""));
	RESULT=paso;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOTEXTUAL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PASOSMAQUINAS ::= PASOMAQUINA 
            {
              ArrayList<Paso> RESULT =null;
		int pasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PasoMaquina pasmaq = (PasoMaquina)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Paso> vpasos = new ArrayList<Paso>();
	vpasos.add(pasmaq);
	RESULT=vpasos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PASOSMAQUINAS ::= PASOMAQUINA PASOSMAQUINAS 
            {
              ArrayList<Paso> RESULT =null;
		int pasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PasoMaquina pasmaq = (PasoMaquina)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpas.add(pasmaq);
	RESULT=vpas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PASOMAQUINA ::= programar izqParent cadena coma numero coma numero coma numero coma invertir drchParent pcoma 
            {
              PasoMaquina RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int velleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int velright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer vel = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int temleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int temright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tem = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer tie = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String inv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	PasoMaquina paso = new PasoMaquina(des.replaceAll("\"",""), vel, tem, tie, inv.equals("Si"));
	RESULT=paso;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOMAQUINA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INTRODUCIR ::= introducir izqParent INTRODUCIRARGS drchParent pcoma 
            {
              PasoIntroducir RESULT =null;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=intr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INTRODUCIRARGS ::= id 
            {
              PasoIntroducir RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	boolean encontrado = false;
	String nombre = id;
	ArrayList<Ingrediente> vingredientes = ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value));
	for(int i = 0; i < vingredientes.size(); i++) {
		if(id.equals(vingredientes.get(i).getID())) {
			nombre = vingredientes.get(i).getNombre();
			((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value)).remove(i);
			encontrado = true;
		}
	}
	if(!encontrado) {
		ArrayList<Ingrediente> vingredientesglobal = ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value));
		for(int i = 0; i < vingredientesglobal.size(); i++) {
			if(id.equals(vingredientesglobal.get(i).getID())) {
				Ingrediente ing = new Ingrediente(id, vingredientesglobal.get(i).getNombre(), vingredientesglobal.get(i).getCantidad(), vingredientesglobal.get(i).getMedida());
				((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value)).remove(i);
				ing.setCantidad(0);
				((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value)).add(ing);
				nombre = ing.getNombre();
				encontrado = true;
			}
		}
	}
	if(!encontrado) {
		System.out.println("ERROR: no existe el ingrediente con id: "+id);
		throw new Exception("ERROR: no existe el ingrediente con id: "+id);
	}
	PasoIntroducir introducir = new PasoIntroducir(nombre, 1, EnumMedida.UDS);
	RESULT=introducir;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INTRODUCIRARGS ::= numero medidaIngrediente id 
            {
              PasoIntroducir RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	boolean encontrado = false;
	String nombre = id;
	ArrayList<Ingrediente> vingredientes = ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value));
	for(int i = 0; i < vingredientes.size(); i++) {
		if(id.equals(vingredientes.get(i).getID())) {
			Ingrediente ing = new Ingrediente(id, vingredientes.get(i).getNombre(), vingredientes.get(i).getCantidad(), vingredientes.get(i).getMedida());
			if (ing.getMedida() == EnumMedida.valueOf(med)){
				((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value)).remove(i);	
				if (ing.getCantidad()>num) {
					ing.setCantidad(ing.getCantidad()-num);
					((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value)).add(ing);
				} else if (ing.getCantidad()==num) {
					System.out.println("WARNING: puedes utilizar la opcion introducir("+id+") para el paso introducir("+num+" "+med.toString()+" "+id+");");
				} else {
					System.out.println("ERROR: no hay suficiente ingrediente con el id: "+id);
            				throw new Exception("ERROR: no hay suficiente ingrediente con el id: "+id);
				}
			} else {
				System.out.println("ERROR: utilice la misma medida que declara en ingredientes para el ingrediente con id: "+id);
            			throw new Exception("ERROR: utilice la misma medida que declara en ingredientes para el ingrediente con id: "+id);
			}
			nombre = ing.getNombre();
			encontrado = true;
		}


	}
	if(!encontrado) {
		ArrayList<Ingrediente> vingredientesglobal = ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value));
		for(int i = 0; i < vingredientesglobal.size(); i++) {
			if(id.equals(vingredientesglobal.get(i).getID())) {
				Ingrediente ing = new Ingrediente(id, vingredientesglobal.get(i).getNombre(), vingredientesglobal.get(i).getCantidad(), vingredientesglobal.get(i).getMedida());
				if (ing.getMedida() == EnumMedida.valueOf(med)){
					((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value)).remove(i);	
					if (ing.getCantidad()>num) {
						ing.setCantidad(ing.getCantidad()-num);
						((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value)).add(ing);
					} else if (ing.getCantidad()==num) {
						ing.setCantidad(0);
						((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value)).add(ing);
						System.out.println("WARNING: puedes utilizar la opcion introducir("+id+") para el paso introducir("+num+" "+med.toString()+" "+id+");");
					} else {
						System.out.println("ERROR: no hay suficiente ingrediente con el id: "+id);
		    				throw new Exception("ERROR: no hay suficiente ingrediente con el id: "+id);
					}
				} else {
					System.out.println("ERROR: utilice la misma medida que declara en ingredientes para el ingrediente con id: "+id);
            				throw new Exception("ERROR: utilice la misma medida que declara en ingredientes para el ingrediente con id: "+id);
				}
				nombre = ing.getNombre();
				encontrado = true;
			}
		}
	}
	if(!encontrado) {
		System.out.println("ERROR: no existe el ingrediente con id: "+id);
		throw new Exception("ERROR: no existe el ingrediente con id: "+id);
	}
	PasoIntroducir introducir = new PasoIntroducir(nombre, num, EnumMedida.valueOf(med));
	RESULT=introducir;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SACAR ::= sacar izqParent cadena coma id drchParent pcoma 
            {
              PasoSacar RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	for(Ingrediente i : ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value))) {
		if(id.equals(i.getID())) {
			System.out.println("ERROR: existe un ingrediente local con el mismo id");
            		throw new Exception("ERROR: existe un ingrediente local con el mismo id");
		}
	}
	for(Ingrediente i : ((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value))) {
		if(id.equals(i.getID())) {
			System.out.println("ERROR: existe un ingrediente global con el mismo id");
            		throw new Exception("ERROR: existe un ingrediente global con el mismo id");
		}
	}
	((ArrayList<Ingrediente>) (((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value)).add(new Ingrediente(id, nom.replaceAll("\"",""), 1, EnumMedida.UDS));
	RESULT=new PasoSacar(nom.replaceAll("\"",""));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
