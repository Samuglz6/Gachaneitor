
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 12 12:10:10 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 12 12:10:10 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\011\000\002\002\004\000\002\003" +
    "\005\000\002\004\010\000\002\005\007\000\002\006\006" +
    "\000\002\007\005\000\002\010\004\000\002\011\011\000" +
    "\002\012\005\000\002\013\005\000\002\014\005\000\002" +
    "\015\016\000\002\016\007\000\002\017\011\000\002\020" +
    "\007\000\002\021\007\000\002\022\017\000\002\023\011" +
    "\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\015\005\001\002\000\004\002\156\001" +
    "\002\000\004\005\006\001\002\000\004\007\007\001\002" +
    "\000\004\016\010\001\002\000\004\005\154\001\002\000" +
    "\004\017\013\001\002\000\004\026\036\001\002\000\004" +
    "\007\014\001\002\000\004\035\016\001\002\000\004\026" +
    "\027\001\002\000\004\007\017\001\002\000\004\004\020" +
    "\001\002\000\004\032\024\001\002\000\004\004\020\001" +
    "\002\000\004\010\023\001\002\000\004\026\ufffd\001\002" +
    "\000\004\006\025\001\002\000\004\011\026\001\002\000" +
    "\006\004\ufffc\010\ufffc\001\002\000\004\006\033\001\002" +
    "\000\004\026\027\001\002\000\004\010\032\001\002\000" +
    "\004\026\ufffe\001\002\000\004\011\034\001\002\000\006" +
    "\010\ufffb\026\ufffb\001\002\000\004\026\036\001\002\000" +
    "\004\006\041\001\002\000\004\010\040\001\002\000\004" +
    "\002\001\001\002\000\004\007\042\001\002\000\004\022" +
    "\043\001\002\000\004\031\151\001\002\000\004\035\070" +
    "\001\002\000\004\023\047\001\002\000\004\036\052\001" +
    "\002\000\004\004\050\001\002\000\004\011\051\001\002" +
    "\000\004\036\ufff6\001\002\000\004\004\054\001\002\000" +
    "\004\035\ufff8\001\002\000\004\034\055\001\002\000\004" +
    "\011\056\001\002\000\004\040\057\001\002\000\004\004" +
    "\060\001\002\000\004\034\061\001\002\000\004\011\062" +
    "\001\002\000\004\037\063\001\002\000\004\004\064\001" +
    "\002\000\004\034\065\001\002\000\004\011\066\001\002" +
    "\000\004\035\ufff5\001\002\000\004\024\075\001\002\000" +
    "\004\007\071\001\002\000\004\004\020\001\002\000\004" +
    "\004\020\001\002\000\004\010\074\001\002\000\004\024" +
    "\ufff4\001\002\000\004\007\100\001\002\000\004\010\077" +
    "\001\002\000\006\010\ufff9\026\ufff9\001\002\000\004\030" +
    "\101\001\002\000\004\013\145\001\002\000\004\021\103" +
    "\001\002\000\004\013\137\001\002\000\004\021\103\001" +
    "\002\000\004\030\101\001\002\000\004\025\110\001\002" +
    "\000\004\030\101\001\002\000\004\013\111\001\002\000" +
    "\004\006\112\001\002\000\004\012\113\001\002\000\004" +
    "\004\114\001\002\000\004\012\115\001\002\000\004\004" +
    "\116\001\002\000\004\012\117\001\002\000\004\004\120" +
    "\001\002\000\004\012\121\001\002\000\004\033\122\001" +
    "\002\000\004\014\123\001\002\000\004\011\124\001\002" +
    "\000\004\030\ufff0\001\002\000\004\020\127\001\002\000" +
    "\006\021\ufff1\030\ufff1\001\002\000\004\013\130\001\002" +
    "\000\004\006\131\001\002\000\004\014\132\001\002\000" +
    "\004\011\133\001\002\000\006\021\uffee\030\uffee\001\002" +
    "\000\004\030\101\001\002\000\004\010\136\001\002\000" +
    "\004\010\ufff3\001\002\000\004\004\140\001\002\000\004" +
    "\032\141\001\002\000\004\006\142\001\002\000\004\014" +
    "\143\001\002\000\004\011\144\001\002\000\004\030\uffef" +
    "\001\002\000\004\006\146\001\002\000\004\014\147\001" +
    "\002\000\004\011\150\001\002\000\012\010\ufff2\020\ufff2" +
    "\021\ufff2\025\ufff2\001\002\000\004\011\152\001\002\000" +
    "\004\023\ufff7\001\002\000\004\010\ufffa\001\002\000\004" +
    "\011\155\001\002\000\004\017\uffff\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\010\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\006\010" +
    "\036\011\034\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\004\007\027\001\001\000\002\001\001\000" +
    "\004\006\020\001\001\000\002\001\001\000\004\006\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\043\013\044\001\001" +
    "\000\002\001\001\000\004\016\066\001\001\000\004\014" +
    "\045\001\001\000\004\015\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\075\001" +
    "\001\000\002\001\001\000\004\006\071\001\001\000\004" +
    "\006\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\101\001\001\000\002\001\001\000\006\021\103\023" +
    "\104\001\001\000\002\001\001\000\006\021\133\023\104" +
    "\001\001\000\004\020\105\001\001\000\004\022\106\001" +
    "\001\000\004\020\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SACAR ::= sacar izqParent cadena drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INTRODUCIR ::= introducir izqParent entero medida cadena drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PROGRAMAR ::= programar izqParent cadena coma entero coma entero coma entero coma invertir drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PASOMAQUINA ::= INTRODUCIR PASOTEXTUAL PROGRAMAR PASOTEXTUAL SACAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOMAQUINA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PASOTEXTUAL ::= realizar izqParent cadena drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOTEXTUAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PASOS ::= pasos izqLlave PASOTEXTUAL PASOMAQUINA PASOMAQUINA PASOTEXTUAL drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INGREDIENTES ::= ingredientes izqLlave INGREDIENTE INGREDIENTE drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIEMPO ::= tCocinado entero tiempo pcoma tPreparacion entero tiempo pcoma tTotal entero tiempo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMENSALES ::= comensales entero pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENSALES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= tipo enumTipo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INFORMACION ::= TIPO COMENSALES TIEMPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INFORMACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PLATO ::= plato cadena izqLlave INFORMACION INGREDIENTES PASOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAPLATOS ::= PLATO PLATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPLATOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONPLATO ::= plato cadena pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONPLATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INGREDIENTE ::= entero medida cadena pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INGREDIENTESGLOBALES ::= ingredientes izqLlave INGREDIENTE INGREDIENTE drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTESGLOBALES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONPLATOS ::= platos izqLlave INGREDIENTESGLOBALES DECLARACIONPLATO DECLARACIONPLATO drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONPLATOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AUTOR ::= nickname id pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= MENU EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // MENU ::= menu id izqLlave AUTOR DECLARACIONPLATOS LISTAPLATOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MENU",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

