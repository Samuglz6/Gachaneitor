
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 16 00:07:33 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 16 00:07:33 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\014\000\002\002\004\000\002\002" +
    "\013\000\002\003\005\000\002\004\006\000\002\005\003" +
    "\000\002\005\004\000\002\010\006\000\002\006\003\000" +
    "\002\006\004\000\002\007\013\000\002\007\012\000\002" +
    "\011\005\000\002\012\005\000\002\013\016\000\002\013" +
    "\006\000\002\013\012\000\002\014\006\000\002\015\003" +
    "\000\002\015\004\000\002\016\010\000\002\017\006\000" +
    "\002\020\005\000\002\020\005\000\002\021\007\000\002" +
    "\021\005\000\002\021\007\000\002\023\004\000\002\023" +
    "\002\000\002\024\007\000\002\025\003\000\002\025\004" +
    "\000\002\026\017\000\002\027\007\000\002\030\003\000" +
    "\002\030\005\000\002\031\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\023\005\001\002\000\004\002\207\001" +
    "\002\000\004\004\006\001\002\000\004\017\007\001\002" +
    "\000\004\005\010\001\002\000\004\013\011\001\002\000" +
    "\004\022\012\001\002\000\004\004\205\001\002\000\004" +
    "\024\015\001\002\000\006\033\030\035\033\001\002\000" +
    "\004\013\016\001\002\000\004\004\020\001\002\000\006" +
    "\004\020\014\ufffc\001\002\000\004\017\023\001\002\000" +
    "\004\014\022\001\002\000\006\033\ufffd\035\ufffd\001\002" +
    "\000\004\005\024\001\002\000\004\015\025\001\002\000" +
    "\006\004\ufffa\014\ufffa\001\002\000\004\014\ufffb\001\002" +
    "\000\004\014\204\001\002\000\006\004\053\005\052\001" +
    "\002\000\006\014\ufff9\033\030\001\002\000\004\033\030" +
    "\001\002\000\004\013\034\001\002\000\004\004\036\001" +
    "\002\000\004\014\046\001\002\000\004\017\041\001\002" +
    "\000\006\004\036\014\uffef\001\002\000\004\014\uffee\001" +
    "\002\000\004\012\042\001\002\000\004\010\043\001\002" +
    "\000\004\005\044\001\002\000\004\015\045\001\002\000" +
    "\006\004\uffed\014\uffed\001\002\000\006\030\ufff0\033\ufff0" +
    "\001\002\000\004\014\050\001\002\000\004\002\001\001" +
    "\002\000\004\014\ufff8\001\002\000\004\013\176\001\002" +
    "\000\004\013\054\001\002\000\004\031\055\001\002\000" +
    "\004\007\174\001\002\000\004\027\060\001\002\000\006" +
    "\036\063\037\064\001\002\000\004\012\061\001\002\000" +
    "\004\015\062\001\002\000\006\036\ufff4\037\ufff4\001\002" +
    "\000\004\012\161\001\002\000\004\012\156\001\002\000" +
    "\004\035\033\001\002\000\004\030\070\001\002\000\004" +
    "\014\155\001\002\000\004\013\071\001\002\000\006\026" +
    "\uffe5\034\072\001\002\000\004\020\151\001\002\000\004" +
    "\014\150\001\002\000\004\025\136\001\002\000\014\014" +
    "\uffe5\025\uffe5\026\uffe5\032\uffe5\034\072\001\002\000\004" +
    "\026\077\001\002\000\004\020\125\001\002\000\010\026" +
    "\uffe5\032\uffe5\034\072\001\002\000\004\025\uffe8\001\002" +
    "\000\006\026\077\032\104\001\002\000\010\025\uffe5\026" +
    "\uffe5\034\072\001\002\000\004\020\107\001\002\000\012" +
    "\025\uffe3\026\uffe3\032\104\034\uffe3\001\002\000\010\025" +
    "\uffe2\026\uffe2\034\uffe2\001\002\000\004\005\110\001\002" +
    "\000\004\016\111\001\002\000\004\012\112\001\002\000" +
    "\004\016\113\001\002\000\004\012\114\001\002\000\004" +
    "\016\115\001\002\000\004\012\116\001\002\000\004\016" +
    "\117\001\002\000\004\006\120\001\002\000\004\021\121" +
    "\001\002\000\004\015\122\001\002\000\012\025\uffe1\026" +
    "\uffe1\032\uffe1\034\uffe1\001\002\000\004\025\uffe9\001\002" +
    "\000\006\025\uffe7\026\077\001\002\000\006\004\130\012" +
    "\126\001\002\000\004\010\133\001\002\000\004\021\131" +
    "\001\002\000\004\021\uffdf\001\002\000\004\015\132\001" +
    "\002\000\010\026\uffe0\032\uffe0\034\uffe0\001\002\000\004" +
    "\004\134\001\002\000\004\021\uffde\001\002\000\012\014" +
    "\uffe6\025\uffe6\026\uffe6\032\uffe6\001\002\000\004\020\142" +
    "\001\002\000\010\014\uffe5\026\uffe5\034\072\001\002\000" +
    "\004\014\uffea\001\002\000\006\014\uffeb\026\077\001\002" +
    "\000\004\005\143\001\002\000\004\016\144\001\002\000" +
    "\004\004\145\001\002\000\004\021\146\001\002\000\004" +
    "\015\147\001\002\000\010\014\uffdd\026\uffdd\034\uffdd\001" +
    "\002\000\004\014\uffec\001\002\000\004\005\152\001\002" +
    "\000\004\021\153\001\002\000\004\015\154\001\002\000" +
    "\014\014\uffe4\025\uffe4\026\uffe4\032\uffe4\034\uffe4\001\002" +
    "\000\006\014\ufff7\033\ufff7\001\002\000\004\011\157\001" +
    "\002\000\004\015\160\001\002\000\006\030\ufff2\035\ufff2" +
    "\001\002\000\004\011\162\001\002\000\004\015\163\001" +
    "\002\000\004\040\164\001\002\000\004\012\165\001\002" +
    "\000\004\011\166\001\002\000\004\015\167\001\002\000" +
    "\010\030\ufff1\035\ufff1\037\170\001\002\000\004\012\171" +
    "\001\002\000\004\011\172\001\002\000\004\015\173\001" +
    "\002\000\006\030\ufff3\035\ufff3\001\002\000\004\015\175" +
    "\001\002\000\004\027\ufff5\001\002\000\004\031\055\001" +
    "\002\000\004\027\060\001\002\000\006\036\063\037\064" +
    "\001\002\000\004\030\070\001\002\000\004\014\203\001" +
    "\002\000\006\014\ufff6\033\ufff6\001\002\000\004\002\uffff" +
    "\001\002\000\004\015\206\001\002\000\004\024\ufffe\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\002\001\001\000" +
    "\004\004\013\001\001\000\010\006\026\007\030\014\031" +
    "\001\001\000\002\001\001\000\006\005\020\010\016\001" +
    "\001\000\006\005\025\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\050\007\030\001" +
    "\001\000\006\006\046\007\030\001\001\000\002\001\001" +
    "\000\006\015\034\016\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\037\016\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\055\001\001" +
    "\000\002\001\001\000\004\012\056\001\001\000\004\013" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\065\001\001\000\004\017\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\072\021\073\023\075\024" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\136\001\001\000\006\023\134\024\074\001\001\000" +
    "\004\027\077\001\001\000\002\001\001\000\010\021\100" +
    "\023\101\024\074\001\001\000\002\001\001\000\010\025" +
    "\102\026\104\027\077\001\001\000\010\021\122\023\123" +
    "\024\074\001\001\000\002\001\001\000\006\025\105\026" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\077\001\001" +
    "\000\004\030\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\137\021\073\023\140\024\074" +
    "\001\001\000\002\001\001\000\004\027\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\176\001\001" +
    "\000\004\012\177\001\001\000\004\013\200\001\001\000" +
    "\004\017\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		File fichero=new File(args[0]);
		FileReader entrada =new FileReader(fichero);
		try{
		  new parser(new scanner(entrada)).parse();
   		System.out.println("ANALISIS CORRECTO ");
		}
		catch ( Exception e) {
			System.out.println(" Analisis INCORRECTO !!");
		}
 	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SACAR ::= sacar izqParent cadena coma id drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INTRODUCIRARGS ::= numero medidaIngrediente id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INTRODUCIRARGS ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INTRODUCIR ::= introducir izqParent INTRODUCIRARGS drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PASOMAQUINA ::= programar izqParent cadena coma numero coma numero coma numero coma invertir drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOMAQUINA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PASOSMAQUINAS ::= PASOMAQUINA PASOSMAQUINAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PASOSMAQUINAS ::= PASOMAQUINA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PASOTEXTUAL ::= realizar izqParent cadena drchParent pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOTEXTUAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PASOSTEXTUALES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PASOSTEXTUALES ::= PASOTEXTUAL PASOSTEXTUALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS PASOSTEXTUALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS PASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAPASOS ::= PASOS SACAR LISTAPASOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAPASOS ::= PASOS SACAR PASOSTEXTUALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SECCIONPASOS ::= pasos izqLlave LISTAPASOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPASOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INGREDIENTE ::= id dospuntos numero medidaIngrediente cadena pcoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer can = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*Ingrediente ingrediente = new Ingrediente(id, nom.substring(1,-1), can, med); RESULT=ingrediente;*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTADOINGREDIENTES ::= INGREDIENTE LISTADOINGREDIENTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTADOINGREDIENTES ::= INGREDIENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SECCIONINGREDIENTES ::= ingredientes izqLlave LISTADOINGREDIENTES drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIEMPO ::= tTotal numero medidaTiempo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma tTotal numero medidaTiempo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMENSALES ::= comensales numero pcoma 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENSALES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= tipo nombreTipo pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RECETA ::= plato cadena izqLlave TIPO COMENSALES TIEMPO SECCIONPASOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RECETA ::= plato id izqLlave TIPO COMENSALES TIEMPO SECCIONINGREDIENTES SECCIONPASOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SECCIONRECETAS ::= RECETA SECCIONRECETAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SECCIONRECETAS ::= RECETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PLATO ::= id dospuntos cadena pcoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLATO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTADOPLATOS ::= PLATO LISTADOPLATOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTADOPLATOS ::= PLATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SECCIONPLATOS ::= platos izqLlave LISTADOPLATOS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPLATOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AUTOR ::= nickname id pcoma 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SECCIONMENU ::= menu id dospuntos cadena izqLlave AUTOR SECCIONPLATOS SECCIONRECETAS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONMENU",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SECCIONMENU EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SECCIONMENU ::= menu id dospuntos cadena izqLlave AUTOR SECCIONPLATOS SECCIONINGREDIENTES SECCIONRECETAS drchLlave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONMENU",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

