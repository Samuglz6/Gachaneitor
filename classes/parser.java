
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 16 18:12:44 CET 2020
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 16 18:12:44 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\014\000\002\003\013\000\002\004\005" +
    "\000\002\005\006\000\002\006\003\000\002\006\004\000" +
    "\002\011\006\000\002\007\003\000\002\007\004\000\002" +
    "\010\013\000\002\010\012\000\002\012\005\000\002\013" +
    "\005\000\002\014\016\000\002\014\006\000\002\014\012" +
    "\000\002\015\006\000\002\016\003\000\002\016\004\000" +
    "\002\017\010\000\002\020\006\000\002\021\005\000\002" +
    "\021\005\000\002\022\007\000\002\022\005\000\002\022" +
    "\007\000\002\024\004\000\002\024\002\000\002\025\007" +
    "\000\002\026\003\000\002\026\004\000\002\027\017\000" +
    "\002\030\007\000\002\031\003\000\002\031\005\000\002" +
    "\032\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\023\005\001\002\000\006\002\001\023" +
    "\005\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\017\011\001" +
    "\002\000\004\005\012\001\002\000\004\013\013\001\002" +
    "\000\004\022\014\001\002\000\004\004\207\001\002\000" +
    "\004\024\017\001\002\000\006\033\033\035\035\001\002" +
    "\000\004\013\020\001\002\000\004\004\022\001\002\000" +
    "\006\004\022\014\ufffa\001\002\000\004\017\025\001\002" +
    "\000\004\014\024\001\002\000\006\033\ufffb\035\ufffb\001" +
    "\002\000\004\005\026\001\002\000\004\015\027\001\002" +
    "\000\006\004\ufff8\014\ufff8\001\002\000\004\014\ufff9\001" +
    "\002\000\004\014\206\001\002\000\006\014\ufff7\033\033" +
    "\001\002\000\006\004\054\005\053\001\002\000\004\033" +
    "\033\001\002\000\004\013\036\001\002\000\004\004\040" +
    "\001\002\000\004\014\050\001\002\000\004\017\043\001" +
    "\002\000\006\004\040\014\uffed\001\002\000\004\014\uffec" +
    "\001\002\000\004\012\044\001\002\000\004\010\045\001" +
    "\002\000\004\005\046\001\002\000\004\015\047\001\002" +
    "\000\006\004\uffeb\014\uffeb\001\002\000\006\030\uffee\033" +
    "\uffee\001\002\000\004\014\052\001\002\000\006\002\ufffe" +
    "\023\ufffe\001\002\000\004\013\177\001\002\000\004\013" +
    "\055\001\002\000\004\031\056\001\002\000\004\007\175" +
    "\001\002\000\004\027\061\001\002\000\006\036\064\037" +
    "\065\001\002\000\004\012\062\001\002\000\004\015\063" +
    "\001\002\000\006\036\ufff2\037\ufff2\001\002\000\004\012" +
    "\162\001\002\000\004\012\157\001\002\000\004\035\035" +
    "\001\002\000\004\030\071\001\002\000\004\014\156\001" +
    "\002\000\004\013\072\001\002\000\006\026\uffe3\034\075" +
    "\001\002\000\004\014\155\001\002\000\004\025\144\001" +
    "\002\000\004\020\137\001\002\000\014\014\uffe3\025\uffe3" +
    "\026\uffe3\032\uffe3\034\075\001\002\000\004\026\100\001" +
    "\002\000\004\020\126\001\002\000\010\026\uffe3\032\uffe3" +
    "\034\075\001\002\000\004\025\uffe6\001\002\000\006\026" +
    "\100\032\105\001\002\000\010\025\uffe3\026\uffe3\034\075" +
    "\001\002\000\004\020\110\001\002\000\012\025\uffe1\026" +
    "\uffe1\032\105\034\uffe1\001\002\000\010\025\uffe0\026\uffe0" +
    "\034\uffe0\001\002\000\004\005\111\001\002\000\004\016" +
    "\112\001\002\000\004\012\113\001\002\000\004\016\114" +
    "\001\002\000\004\012\115\001\002\000\004\016\116\001" +
    "\002\000\004\012\117\001\002\000\004\016\120\001\002" +
    "\000\004\006\121\001\002\000\004\021\122\001\002\000" +
    "\004\015\123\001\002\000\012\025\uffdf\026\uffdf\032\uffdf" +
    "\034\uffdf\001\002\000\004\025\uffe7\001\002\000\006\025" +
    "\uffe5\026\100\001\002\000\006\004\131\012\127\001\002" +
    "\000\004\010\134\001\002\000\004\021\132\001\002\000" +
    "\004\021\uffdd\001\002\000\004\015\133\001\002\000\010" +
    "\026\uffde\032\uffde\034\uffde\001\002\000\004\004\135\001" +
    "\002\000\004\021\uffdc\001\002\000\012\014\uffe4\025\uffe4" +
    "\026\uffe4\032\uffe4\001\002\000\004\005\140\001\002\000" +
    "\004\021\141\001\002\000\004\015\142\001\002\000\014" +
    "\014\uffe2\025\uffe2\026\uffe2\032\uffe2\034\uffe2\001\002\000" +
    "\010\014\uffe3\026\uffe3\034\075\001\002\000\004\020\145" +
    "\001\002\000\004\005\146\001\002\000\004\016\147\001" +
    "\002\000\004\004\150\001\002\000\004\021\151\001\002" +
    "\000\004\015\152\001\002\000\010\014\uffdb\026\uffdb\034" +
    "\uffdb\001\002\000\004\014\uffe8\001\002\000\006\014\uffe9" +
    "\026\100\001\002\000\004\014\uffea\001\002\000\006\014" +
    "\ufff5\033\ufff5\001\002\000\004\011\160\001\002\000\004" +
    "\015\161\001\002\000\006\030\ufff0\035\ufff0\001\002\000" +
    "\004\011\163\001\002\000\004\015\164\001\002\000\004" +
    "\040\165\001\002\000\004\012\166\001\002\000\004\011" +
    "\167\001\002\000\004\015\170\001\002\000\010\030\uffef" +
    "\035\uffef\037\171\001\002\000\004\012\172\001\002\000" +
    "\004\011\173\001\002\000\004\015\174\001\002\000\006" +
    "\030\ufff1\035\ufff1\001\002\000\004\015\176\001\002\000" +
    "\004\027\ufff3\001\002\000\004\031\056\001\002\000\004" +
    "\027\061\001\002\000\006\036\064\037\065\001\002\000" +
    "\004\030\071\001\002\000\004\014\204\001\002\000\006" +
    "\014\ufff4\033\ufff4\001\002\000\004\014\ufff6\001\002\000" +
    "\006\002\ufffd\023\ufffd\001\002\000\004\015\210\001\002" +
    "\000\004\024\ufffc\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\002\005\003\003\001\001\000\006\002" +
    "\210\003\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\010\007\030\010\031\015" +
    "\033\001\001\000\002\001\001\000\006\006\022\011\020" +
    "\001\001\000\006\006\027\011\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\204\010\031\001\001\000\002" +
    "\001\001\000\006\007\050\010\031\001\001\000\002\001" +
    "\001\000\006\016\036\017\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\041\017\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\056\001\001\000\002\001" +
    "\001\000\004\013\057\001\001\000\004\014\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\066\001\001" +
    "\000\004\020\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\072\022\073\024\076\025\075\001\001" +
    "\000\002\001\001\000\004\032\142\001\001\000\002\001" +
    "\001\000\006\024\135\025\075\001\001\000\004\030\100" +
    "\001\001\000\002\001\001\000\010\022\101\024\102\025" +
    "\075\001\001\000\002\001\001\000\010\026\103\027\105" +
    "\030\100\001\001\000\010\022\123\024\124\025\075\001" +
    "\001\000\002\001\001\000\006\026\106\027\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\100\001\001\000\004\031" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\152\022\073\024\153\025\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\177\001\001\000\004\013" +
    "\200\001\001\000\004\014\201\001\001\000\004\020\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		File fichero=new File(args[0]);
		FileReader entrada =new FileReader(fichero);
		try{
			new parser(new scanner(entrada)).parse();
	   		System.out.println("Analisis CORRECTO");
		}
		catch ( Exception e) {
			System.out.println("Analisis INCORRECTO");
		}
 	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SACAR ::= sacar izqParent cadena coma id drchParent pcoma 
            {
              PasoSacar RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	PasoSacar sacar = new PasoSacar(nom.substring(1,nom.length()-2));
	RESULT=sacar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INTRODUCIRARGS ::= numero medidaIngrediente id 
            {
              PasoIntroducir RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	PasoIntroducir introducir = new PasoIntroducir(id, num, EnumMedida.valueOf(med));
	RESULT=introducir;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INTRODUCIRARGS ::= id 
            {
              PasoIntroducir RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*PasoIntroducir introducir = new PasoIntroducir(id);
	RESULT=introducir;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIRARGS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INTRODUCIR ::= introducir izqParent INTRODUCIRARGS drchParent pcoma 
            {
              PasoIntroducir RESULT =null;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=intr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCIR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PASOMAQUINA ::= programar izqParent cadena coma numero coma numero coma numero coma invertir drchParent pcoma 
            {
              PasoMaquina RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int velleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int velright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer vel = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int temleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int temright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tem = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer tie = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String inv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	PasoMaquina paso = new PasoMaquina(des, vel, tem, tie, inv.equals("Si"));
	RESULT=paso;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOMAQUINA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PASOSMAQUINAS ::= PASOMAQUINA PASOSMAQUINAS 
            {
              ArrayList<Paso> RESULT =null;
		int pasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PasoMaquina pasmaq = (PasoMaquina)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*vpas.add(pasmaq);
	RESULT=vpas;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PASOSMAQUINAS ::= PASOMAQUINA 
            {
              ArrayList<Paso> RESULT =null;
		int pasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PasoMaquina pasmaq = (PasoMaquina)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*ArrayList<Paso> vpasos = new ArrayList<Paso>();
	vpasos.add(pasmaq);
	RESULT=vpasos;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSMAQUINAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PASOTEXTUAL ::= realizar izqParent cadena drchParent pcoma 
            {
              Paso RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String des = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	Paso paso = new Paso(des);
	RESULT=paso;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOTEXTUAL",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PASOSTEXTUALES ::= 
            {
              ArrayList<Paso> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PASOSTEXTUALES ::= PASOTEXTUAL PASOSTEXTUALES 
            {
              ArrayList<Paso> RESULT =null;
		int pastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Paso pastex = (Paso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpastex.add(pastex);
	RESULT=vpastex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOSTEXTUALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS PASOSTEXTUALES 
            {
              ArrayList<Paso> RESULT =null;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpastex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpastex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpastex2 = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vpasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Paso> vpasmaq = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpastex3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpastex3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpastex3 = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*ArrayList<Paso> vpasos = new ArrayList<Paso>();
	vpasos.addAll(vpastex);
	vpasos.add(intr);
	vpasos.addAll(vpastex2);
	vpasos.addAll(vpasmaq);
	vpasos.addAll(vpastex3);
	RESULT=vpasos;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOS 
            {
              ArrayList<Paso> RESULT =null;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*vpas.addAll(vpastex);
	vpas.add(intr);
	RESULT=vpas;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PASOS ::= PASOSTEXTUALES INTRODUCIR PASOSTEXTUALES PASOSMAQUINAS PASOS 
            {
              ArrayList<Paso> RESULT =null;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int intrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int intrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PasoIntroducir intr = (PasoIntroducir)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpastex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpastex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpastex2 = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vpasmaqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpasmaqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Paso> vpasmaq = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpas.addAll(vpastex);
	vpas.add(intr);
	vpas.addAll(vpastex2);
	vpas.addAll(vpasmaq);
	RESULT=vpas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PASOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAPASOS ::= PASOS SACAR LISTAPASOS 
            {
              ArrayList<Paso> RESULT =null;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PasoSacar sac = (PasoSacar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpasfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpasfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpasfin = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*vpas.add(sac);
	vpas.addAll(vpasfin);
	RESULT=vpas;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAPASOS ::= PASOS SACAR PASOSTEXTUALES 
            {
              ArrayList<Paso> RESULT =null;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PasoSacar sac = (PasoSacar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpastexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpastexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Paso> vpastex = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	/*vpas.add(sac);
	vpas.addAll(vpastex);
	RESULT=vpas;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPASOS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SECCIONPASOS ::= pasos izqLlave LISTAPASOS drchLlave 
            {
              ArrayList<Paso> RESULT =null;
		int vpasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Paso> vpas = (ArrayList<Paso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=vpas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPASOS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INGREDIENTE ::= id dospuntos numero medidaIngrediente cadena pcoma 
            {
              Ingrediente RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int canleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int canright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer can = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int medleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int medright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String med = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Ingrediente ingrediente = new Ingrediente(id, nom.substring(1,nom.length()-2), can, EnumMedida.valueOf(med));
	RESULT=ingrediente;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTADOINGREDIENTES ::= INGREDIENTE LISTADOINGREDIENTES 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ving.add(ing);
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTADOINGREDIENTES ::= INGREDIENTE 
            {
              ArrayList<Ingrediente> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ingrediente ing = (Ingrediente)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Ingrediente> vingredientes = new ArrayList<Ingrediente>();
	vingredientes.add(ing);
	RESULT=vingredientes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOINGREDIENTES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SECCIONINGREDIENTES ::= ingredientes izqLlave LISTADOINGREDIENTES drchLlave 
            {
              ArrayList<Ingrediente> RESULT =null;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	System.out.println("Ingre");
	RESULT=ving;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONINGREDIENTES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int tcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tcoc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String mcoc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tpre = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mpre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(tcoc, EnumTiempo.valueOf(mcoc), tpre, EnumTiempo.valueOf(mpre), 0, EnumTiempo.valueOf("MIN"));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIEMPO ::= tTotal numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int ttotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ttot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mtotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mtotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mtot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(0, EnumTiempo.valueOf("MIN"), 0, EnumTiempo.valueOf("MIN"), ttot, EnumTiempo.valueOf(mtot));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIEMPO ::= tCocinado numero medidaTiempo pcoma tPreparacion numero medidaTiempo pcoma tTotal numero medidaTiempo pcoma 
            {
              Tiempos RESULT =null;
		int tcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer tcoc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int mcocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mcocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String mcoc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer tpre = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mpreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mpreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String mpre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ttotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ttot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mtotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mtotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mtot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Tiempos tiempos = new Tiempos(tcoc, EnumTiempo.valueOf(mcoc), tpre, EnumTiempo.valueOf(mpre), ttot, EnumTiempo.valueOf(mtot));
	RESULT=tiempos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMENSALES ::= comensales numero pcoma 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=num;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENSALES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= tipo nombreTipo pcoma 
            {
              EnumTipo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=EnumTipo.valueOf(tip);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RECETA ::= plato cadena izqLlave TIPO COMENSALES TIEMPO SECCIONPASOS drchLlave 
            {
              ArrayList<Plato> RESULT =null;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RECETA ::= plato id izqLlave TIPO COMENSALES TIEMPO SECCIONINGREDIENTES SECCIONPASOS drchLlave 
            {
              ArrayList<Plato> RESULT =null;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("RECETA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SECCIONRECETAS ::= RECETA SECCIONRECETAS 
            {
              ArrayList<Plato> RESULT =null;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SECCIONRECETAS ::= RECETA 
            {
              ArrayList<Plato> RESULT =null;
		


              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONRECETAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PLATO ::= id dospuntos cadena pcoma 
            {
              Plato RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Plato plato = new Plato(id, nom);
	RESULT=plato;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLATO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTADOPLATOS ::= PLATO LISTADOPLATOS 
            {
              ArrayList<Plato> RESULT =null;
		int plaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Plato pla = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vpla.add(pla);
	RESULT=vpla;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTADOPLATOS ::= PLATO 
            {
              ArrayList<Plato> RESULT =null;
		int plaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plato pla = (Plato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Plato> vplatos = new ArrayList<Plato>();
	vplatos.add(pla);
	RESULT=vplatos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTADOPLATOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SECCIONPLATOS ::= platos izqLlave LISTADOPLATOS drchLlave 
            {
              ArrayList<Plato> RESULT =null;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=vpla;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONPLATOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // AUTOR ::= nickname id pcoma 
            {
              String RESULT =null;
		int autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int autright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String aut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUTOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SECCIONMENU ::= menu id dospuntos cadena izqLlave AUTOR SECCIONPLATOS SECCIONRECETAS drchLlave 
            {
              Menu RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int autright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String aut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vpla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> vpla2 = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Menu menu = new Menu(id, nom, aut, vpla, new ArrayList<Ingrediente>());
	RESULT=menu;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONMENU",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SECCIONMENU ::= menu id dospuntos cadena izqLlave AUTOR SECCIONPLATOS SECCIONINGREDIENTES SECCIONRECETAS drchLlave 
            {
              Menu RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int autright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String aut = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vplaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vplaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Plato> vpla = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Ingrediente> ving = (ArrayList<Ingrediente>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vpla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vpla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Plato> vpla2 = (ArrayList<Plato>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	vpla=vpla2;
	Menu menu = new Menu(id, nom, aut, vpla, ving);
	RESULT=menu;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SECCIONMENU",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= SECCIONMENU PROGRAMA 
            {
              ArrayList<Menu> RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Menu men = (Menu)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vmenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vmenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Menu> vmen = (ArrayList<Menu>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	vmen.add(men);
	RESULT=vmen;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Menu> start_val = (ArrayList<Menu>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= SECCIONMENU 
            {
              ArrayList<Menu> RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Menu men = (Menu)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ArrayList<Menu> vmenus = new ArrayList<Menu>();
	vmenus.add(men);
	RESULT=vmenus;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

