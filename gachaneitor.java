/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>gachaneitor.jflex</tt>
 */
class gachaneitor {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\62\1\62\1\2\22\0\1\3\7\0\1\60"+
    "\1\61\2\0\1\57\1\5\2\0\1\12\10\14\1\13\1\0\1\36"+
    "\5\0\1\7\1\0\1\27\1\54\1\17\1\0\1\53\1\0\1\26"+
    "\1\0\1\30\1\40\1\16\1\20\1\42\1\37\1\0\1\51\1\43"+
    "\1\41\1\21\4\0\1\11\4\0\1\10\1\0\1\4\1\0\1\32"+
    "\1\56\1\23\1\0\1\55\1\0\1\31\1\0\1\33\1\45\1\22"+
    "\1\24\1\47\1\44\1\0\1\52\1\50\1\46\1\25\4\0\1\6"+
    "\1\34\1\0\1\35\7\0\1\62\u05da\0\12\15\206\0\12\15\306\0"+
    "\12\15\u019c\0\12\15\166\0\12\15\166\0\12\15\166\0\12\15\166\0"+
    "\12\15\166\0\12\15\166\0\12\15\166\0\12\15\166\0\12\15\166\0"+
    "\12\15\140\0\12\15\166\0\12\15\106\0\12\15\u0116\0\12\15\106\0"+
    "\12\15\u0746\0\12\15\46\0\12\15\u012c\0\12\15\200\0\12\15\246\0"+
    "\12\15\6\0\12\15\266\0\12\15\126\0\12\15\206\0\12\15\6\0"+
    "\12\15\u03ce\0\1\62\1\62\u85f6\0\12\15\u02a6\0\12\15\46\0\12\15"+
    "\306\0\12\15\26\0\12\15\126\0\12\15\u0196\0\12\15\u5316\0\12\15"+
    "\u0586\0\12\15\u0bbc\0\12\15\200\0\12\15\74\0\12\15\220\0\12\15"+
    "\u0116\0\12\15\u01d6\0\12\15\u0176\0\12\15\146\0\12\15\u0216\0\12\15"+
    "\u5176\0\12\15\346\0\12\15\u6c74\0\62\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\10\1\1\4\1\5"+
    "\1\6\10\1\1\7\1\10\1\11\1\12\57\0\1\13"+
    "\10\0\1\14\3\0\1\15\1\0\1\14\17\0\1\16"+
    "\1\17\2\0\1\20\1\17\5\0\1\21\10\0\1\22"+
    "\1\0\1\23\3\0\1\24\17\0\1\25\10\0\1\26"+
    "\10\0\1\27\2\0\1\30\1\0\1\31\7\0\1\32"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\63\0\63"+
    "\0\63\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\63\0\63\0\63\0\63\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\63\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\63\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\63\0\u1353\0\u1386\0\u13b9\0\63"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\63"+
    "\0\u16e9\0\63\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b"+
    "\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\63\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\63\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\63"+
    "\0\u1e15\0\u1e48\0\63\0\u1e7b\0\63\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\63\0\u2013\0\u2046\0\u2079";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\6\2\2\6\1\2"+
    "\1\7\1\2\1\10\1\2\1\11\1\2\1\12\1\2"+
    "\1\13\1\14\1\2\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\2\1\23\1\2\1\24\1\25\1\2"+
    "\1\26\1\2\1\27\1\30\1\31\4\2\1\32\1\33"+
    "\1\34\1\35\64\0\1\3\66\0\1\36\67\0\4\6"+
    "\64\0\1\37\71\0\1\40\57\0\1\41\70\0\1\42"+
    "\51\0\1\43\104\0\1\44\44\0\1\45\105\0\1\46"+
    "\22\0\1\47\30\0\1\50\10\0\1\51\37\0\1\52"+
    "\43\0\1\53\57\0\1\54\40\0\1\55\4\0\1\56"+
    "\41\0\1\57\35\0\1\60\75\0\1\61\66\0\1\62"+
    "\45\0\1\63\74\0\1\64\71\0\1\65\57\0\1\66"+
    "\70\0\1\67\71\0\1\70\11\0\1\71\25\0\1\72"+
    "\112\0\1\73\6\0\1\74\27\0\1\75\103\0\1\76"+
    "\26\0\1\77\115\0\1\100\37\0\1\101\17\0\1\102"+
    "\52\0\1\103\103\0\1\104\16\0\1\105\125\0\1\106"+
    "\36\0\1\107\20\0\1\110\50\0\1\111\37\0\1\112"+
    "\57\0\1\113\65\0\1\114\74\0\1\115\71\0\1\116"+
    "\57\0\1\115\70\0\1\117\100\0\1\120\62\0\1\121"+
    "\30\0\1\122\115\0\1\123\62\0\1\124\33\0\1\125"+
    "\101\0\1\126\61\0\1\127\74\0\1\130\25\0\1\131"+
    "\106\0\1\132\27\0\1\133\122\0\1\134\61\0\1\135"+
    "\71\0\1\136\27\0\1\137\107\0\1\132\17\0\1\140"+
    "\116\0\1\141\67\0\1\142\22\0\1\143\75\0\1\144"+
    "\66\0\1\145\100\0\1\146\37\0\1\147\63\0\1\150"+
    "\111\0\1\151\36\0\1\152\63\0\1\153\101\0\1\154"+
    "\61\0\1\155\71\0\1\156\50\0\1\157\74\0\1\160"+
    "\61\0\1\154\61\0\1\161\65\0\1\162\54\0\1\163"+
    "\70\0\1\160\36\0\1\164\65\0\1\165\37\0\1\166"+
    "\2\0\1\167\60\0\1\170\57\0\1\171\132\0\1\172"+
    "\62\0\1\173\51\0\1\174\75\0\1\175\62\0\1\176"+
    "\54\0\1\177\55\0\1\200\26\0\1\201\115\0\1\202"+
    "\70\0\1\200\16\0\1\203\125\0\1\202\24\0\1\204"+
    "\57\0\1\205\64\0\1\206\56\0\1\207\74\0\1\210"+
    "\66\0\1\211\61\0\1\212\67\0\1\213\43\0\1\214"+
    "\100\0\1\215\66\0\1\216\35\0\1\217\74\0\1\220"+
    "\66\0\1\221\47\0\1\222\57\0\1\223\62\0\1\224"+
    "\63\0\1\225\74\0\1\226\66\0\1\226\66\0\1\227"+
    "\52\0\1\230\103\0\1\231\54\0\1\232\53\0\1\233"+
    "\104\0\1\234\24\0\1\235\57\0\1\236\127\0\1\237"+
    "\63\0\1\237\15\0\1\240\63\0\1\241\102\0\1\242"+
    "\54\0\1\243\61\0\1\244\74\0\1\245\55\0\1\246"+
    "\61\0\1\247\110\0\1\250\63\0\1\250\16\0\1\251"+
    "\63\0\1\252\124\0\1\253\52\0\1\254\64\0\1\255"+
    "\71\0\1\253\56\0\1\256\64\0\1\255\21\0\1\257"+
    "\60\0\1\260\74\0\1\261\66\0\1\262\44\0\1\263"+
    "\66\0\1\264\114\0\1\265\67\0\1\265\23\0\1\266"+
    "\61\0\1\167\64\0\1\267\55\0\1\270\70\0\1\166"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\13\1\3\11\10\1\4\11\57\0\1\11"+
    "\10\0\1\1\3\0\1\11\1\0\1\1\17\0\1\11"+
    "\1\1\2\0\1\11\1\1\5\0\1\1\10\0\1\11"+
    "\1\0\1\11\3\0\1\1\17\0\1\11\10\0\1\11"+
    "\10\0\1\11\2\0\1\11\1\0\1\11\7\0\1\11"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  gachaneitor(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 384) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Token erroneo");
            }
          case 27: break;
          case 2: 
            { /* No hacer nada */
            }
          case 28: break;
          case 3: 
            { System.out.println("Encontrado entero");
            }
          case 29: break;
          case 4: 
            { System.out.println("Encontrado {");
            }
          case 30: break;
          case 5: 
            { System.out.println("Encontrado }");
            }
          case 31: break;
          case 6: 
            { System.out.println("Encontrado ;");
            }
          case 32: break;
          case 7: 
            { System.out.println("Encontrado ,");
            }
          case 33: break;
          case 8: 
            { System.out.println("Encontrado (");
            }
          case 34: break;
          case 9: 
            { System.out.println("Encontrado )");
            }
          case 35: break;
          case 10: 
            { System.out.print(yytext());
            }
          case 36: break;
          case 11: 
            { System.out.println("Encontrado menu");
            }
          case 37: break;
          case 12: 
            { System.out.println("Encontrado paso");
            }
          case 38: break;
          case 13: 
            { System.out.println("Encontrado tipo");
            }
          case 39: break;
          case 14: 
            { System.out.println("Encontrado pasos");
            }
          case 40: break;
          case 15: 
            { System.out.println("Encontrado plato");
            }
          case 41: break;
          case 16: 
            { System.out.println("Encontrado sacar");
            }
          case 42: break;
          case 17: 
            { System.out.println("Encontrado cadena");
            }
          case 43: break;
          case 18: 
            { System.out.println("Encontrado platos");
            }
          case 44: break;
          case 19: 
            { System.out.println("Encontrado tiempo");
            }
          case 45: break;
          case 20: 
            { System.out.println("Encontrado id");
            }
          case 46: break;
          case 21: 
            { System.out.println("Encontrado nickname");
            }
          case 47: break;
          case 22: 
            { System.out.println("Encontrado realizar");
            }
          case 48: break;
          case 23: 
            { System.out.println("Encontrado programar");
            }
          case 49: break;
          case 24: 
            { System.out.println("Encontrado introducir");
            }
          case 50: break;
          case 25: 
            { System.out.println("Encontrado comensales");
            }
          case 51: break;
          case 26: 
            { System.out.println("Encontrado lista ingredientes");
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java gachaneitor [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        gachaneitor scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new gachaneitor(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
